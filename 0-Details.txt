How Dart Runs:
    Dart can run in two main ways:
        1- Ahead-of-Time (AOT) Compilation ‚Üí For fast native mobile/desktop apps
            AOT means the Dart code is compiled to native machine code before the app is run.
            Where is AOT Used?
                - In production builds
                - When you create a release app for Android, iOS, Windows, etc.
        2- Just-in-Time (JIT) Compilation ‚Üí Used in development for hot reload
            JIT stands for Just-in-Time compilation. Dart code is compiled at runtime, 
            while the app is running.
            Where is JIT Used?
                - During development
                - When you're using Flutter hot reload or hot restart
    In this repo:
        Your Dart programs run in JIT mode (standard run) and later understand AOT conceptually
        for future use (When You Shift to Flutter).
--------------------------------------------------------------------------------------------
Function Related Questions:
---------------------------
What are the different ways to define functions in Dart?
    --> Standard Named Function (required parameter function if declare)
    --> Arrow Function (Shorthand)
    --> Anonymous Function (Lambda)
    --> Function Expression Stored in a Variable
        e.g:
            Function greet = () => print("Hello");
--------
What is the difference between named and positional parameters?
    --> Positional Parameters:
        - Use square brackets [].
        - Order matters.
        - Arguments name optional.
        e.g:
            void greet(String name, [String title = 'Mr.']) {
                print('Hello $title $name');
            }
            greet('Ali'); // Hello Mr. Ali
    --> Named Parameters:
        - Use curly braces {}.
        - Can be passed in any order.
        - Can be optional (with default) or required (with required).
        e.g:
            void greet({required String name, String title = 'Mr.'}) {
                print('Hello $title $name');
            }
            greet(name: 'Ali'); // Hello Mr. Ali
--------
What is a closure in Dart?
    A closure is a function that captures variables from its surrounding lexical scope, even 
    after the outer function has finished executing.
    example:
        Function makeAdder(int x) {
            return (int y) => x + y; // x is captured
        }
        var add2 = makeAdder(2);
        print(add2(3)); // 5

    - x remains in memory because it‚Äôs used inside the returned function.
--------
How does Dart treat functions as first-class objects?
    In Dart:
        Functions can be assigned to variables.
        Functions can be passed as arguments.
        Functions can be returned from other functions.
--------
What are function tear-offs and when would you use them?
    A function tear-off is a way to refer to a function by name without calling it.
    Use Case:
        You want to pass a function as a reference, not call it.
--------
What is the difference between sync* and async* generators?
    Both return a sequence of values over time using yield.
        | Feature  | `sync*`                | `async*`                            |
        | -------- | ---------------------- | ----------------------------------- |
        | Returns  | `Iterable<T>`          | `Stream<T>`                         |
        | Use case | Synchronous iteration  | Asynchronous (with delays, futures) |
        | Usage    | `for (var x in foo())` | `await for (var x in foo())`        |
        - sync* example:
            Iterable<int> getNumbers() sync* {
                yield 1;
                yield 2;
            }
        - async* example:
            Stream<int> getNumbers() async* {
                await Future.delayed(Duration(seconds: 1));
                yield 1;
                yield 2;
            }
--------------------------------------------------------------------------------------------
Interfaces Related Questions:
----------------------------
--> Why Would You Use implements Over extends?
  Reason:
    You use implements when:
      - You want to use only the structure of a class (its method signatures) and 
        not inherit behavior.
      - You want to implement multiple interfaces, which extends does not allow.
      - You want complete control over the implementation.
--------------------------------------------------------------------------------------------
OOP Concepts related Questions:
-------------------------------
--> What is the difference between using 'const' and 'new' while creating an object in Dart?
    new -->	Explicitly creates a new instance of the class each time. 
            Even if the same arguments are used, it will return a new memory object.
    const --> Creates a compile-time constant object. If the same arguments are used, 
            it will return the same instance from memory (canonicalized).

    Since Dart 2, the new keyword is optional and rarely used. Dart infers new when no 
    other keyword is provided.
        üìå Example:
            var a = const Point(1, 1);
            var b = const Point(1, 1);
            var c = new Point(1, 1);

            print(identical(a, b)); // true (same object)
            print(identical(a, c)); // false (different object)

----------
Canonicalization means?
    - "Creating a single, shared instance for all objects with the same value."
    - So, when Dart canonicalizes an object, it ensures that identical values use 
      the same memory location, instead of creating duplicates

----------
What is the purpose of the 'late' keyword, and when would you use it in instance variable declarations?
    The late keyword tells Dart:
        ‚ÄúI promise this variable will be initialized before it‚Äôs used, but not at declaration time.‚Äù
    Use cases:
        - When you can‚Äôt initialize a variable immediately in the constructor or declaration.
        - When you want lazy initialization.
        - Avoids making the variable nullable or using a default.

--------
What happens in memory when you create an instance of a class?
    - Memory is allocated for the object.
    - All instance fields are initialized.
    - The constructor is called to set up the initial state.
    - A reference to the object is returned and can be assigned to a variable.

-----
How do you check if a variable is an instance of a class in Dart?
    Use the is keyword:
        if (a is Animal) {
            print('a is an instance of Animal');
        }

-------
What‚Äôs the relation between class, constructor, and instance?
    - A class is a blueprint.
    - A constructor is a special method used to initialize an object.
    - An instance (object) is a concrete realization of a class created using the constructor.

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------


